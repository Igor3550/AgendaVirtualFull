generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:12345@banco:5432/agendaVirtual" // env("DATABASE_URL")
}

model Service {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  duration  Int
  active    Boolean    @default(true)
  createdAt DateTime   @default(now())
  Schedule  Schedule[]
  Waiting   Waiting[]

  @@map("services")
}

model Schedule {
  id            Int             @id @default(autoincrement())
  clientName    String
  clientId      Int
  date          String
  hour          Int
  service_id    Int
  finished      Boolean         @default(false)
  createdAt     DateTime        @default(now())
  UserSchedules UserSchedules[]
  Service       Service         @relation(fields: [service_id], references: [id])
  Client        Client          @relation(fields: [clientId], references: [id])

  @@map("schedules")
}

model Waiting {
  id         Int      @id @default(autoincrement())
  clientName String
  date       DateTime
  service_id Int
  createdAt  DateTime @default(now())
  Service    Service  @relation(fields: [service_id], references: [id])

  @@map("waitings")
}

model User {
  id            Int             @id @default(autoincrement())
  name          String
  email         String
  password      String
  clientId      Int
  createdAt     DateTime        @default(now())
  Session       Session[]
  UserSchedules UserSchedules[]
  UserAdmin     UserAdmin[]
  InvalidDate   InvalidDate[]
  Client        Client          @relation(fields: [clientId], references: [id])

  @@map("users")
}

model UserAdmin {
  id        Int      @id @default(autoincrement())
  userId    Int
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@map("usersAdmins")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model UserSchedules {
  id         Int      @id @default(autoincrement())
  userId     Int
  scheduleId Int
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  Schedule   Schedule @relation(fields: [scheduleId], references: [id])

  @@map("user_schedules")
}

model Client {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  User      User[]
  Schedule  Schedule[]

  @@map("clients")
}

enum TransactionType {
  ENTRY
  WITHDRAW
}

model Transaction {
  id          Int             @id @default(autoincrement())
  type        TransactionType
  value       Int
  description String
  createdAt   DateTime        @default(now())

  @@map("transactions")
}

model InvalidDate {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  userId      Int
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id])

  @@map("invalidDates")
}
